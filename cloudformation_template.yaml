AWSTemplateFormatVersion : 2010-09-09
Description: AWS Serverless Security Lab using Amazon S3 and AWS Lambda
Metadata:
  Copyright:
    Value: 'Copyright 2021 Amazon Web Services, Inc. All Rights Reserved.
      This AWS content is provided subject to the terms of the AWS Customer
      Agreement available at https://aws.amazon.com/agreement/ or other written
      agreement between Customer and Amazon Web Services, Inc.'
    VersionDate:
      Value: 20211023
    Identifier:
      Value: cloudformation_template.yaml
    Input:
      Description: Input of all required parameters, if any
    Output:
      Description: This creates a test stack that sends Amazon S3 metadata to an AWS Lambda function
        that stores the data in a Amazon DynamoDB table.  This has security holes in it on purpose.
        IMPORTANT NOTE - This template does NOT conform to AWS best practices wrt security.
        DO NOT use this in any production environment.


Resources:
  ObjectMetadataTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    Properties:
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: False
      AttributeDefinitions:
        - AttributeName: S3ObjectName
          AttributeType: S
      KeySchema:
        - AttributeName: S3ObjectName
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false


  MetadataLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt MetadataLambdaRole.Arn
      Runtime: python3.7
      Environment:
        Variables:
          TableName:  !Ref ObjectMetadataTable
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          import urllib.parse
          def lambda_handler(event, context):
            print(f"Event: {event}")
            try:
              sqs_records = event["Records"]
              for sqs_record in sqs_records:
                body = json.loads(sqs_record["body"])
                if body.get("Event") == "s3:TestEvent":
                  print("Ignorning test event")
                else:
                  ddb = boto3.client('dynamodb')
                  for record in body["Records"]:
                    bucket = record["s3"]["bucket"]["name"]
                    object = urllib.parse.unquote_plus(record["s3"]["object"]["key"])
                    size   = str(record["s3"]["object"]["size"])
                    time   = record["eventTime"]
                    oper   = record["eventName"]
                    print(f"Inserting bucket={bucket}, object={object}, size={size}, time={time}, oper={oper}")
                    ddb.put_item(
                      TableName=os.environ["TableName"],
                      Item={
                        "S3ObjectName": { "S": object },
                        "Bucket": { "S": bucket },
                        "Size": { "N": size },
                        "CreatedTime": { "S": time },
                        "Operation": { "S": oper }
                      }
                    )
            except Exception as err:
              print(f"Exception: {repr(err)}")
              raise


  MetadataLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action: sts:AssumeRole
      #
      # Here is a BAD thing to do:  DO NOT do this in practice
      #
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/job-function/SystemAdministrator
      #
      # Here are more BAD thing to do:  DO NOT do this in practice
      #
      Policies:
        - PolicyName: PutItemDynamoTables
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: sqs:*
                Resource: "*"
              - Effect: Allow
                Action: dynamodb:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"


  QueueLambdaSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt S3NotificationQueue.Arn
      FunctionName: !Ref MetadataLambda


  S3NotificationQueue:
    Type: AWS::SQS::Queue


  S3NotificationQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref S3NotificationQueue
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: SQS:SendMessage
            Resource: !GetAtt S3NotificationQueue.Arn
            Condition:
              ArnLike:
                "aws:SourceArn": !GetAtt FileUploadsBucket.Arn
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId

  FileUploadsBucket:
    Type: AWS::S3::Bucket
    #
    # Uncomment the below for better security:
    #
    #DeletionPolicy: Retain
    # Properties:
    #   BucketEncryption:
    #     ServerSideEncryptionConfiguration:
    #       -
    #         ServerSideEncryptionByDefault:
    #           SSEAlgorithm: AES256
    #   AccessControl: Private
    #   PublicAccessBlockConfiguration:
    #     BlockPublicAcls: True
    #     BlockPublicPolicy: True
    #     IgnorePublicAcls: True
    #     RestrictPublicBuckets: True


  # ForceEncryption:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref FileUploadsBucket
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Sid: DenyUnEncryptedObjectUploads
  #           Effect: Deny
  #           Principal: "*"
  #           Action:
  #             - s3:PutObject
  #           Resource:
  #             - !Sub "arn:${AWS::Partition}:s3:::${FileUploadsBucket}/*"
  #           Condition:
  #             StringNotEquals:
  #               "s3:x-amz-server-side-encryption":
  #                 - "aws:kms"
  #   DependsOn: FileUploadsBucket


  S3EventSubscriptionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt S3EventSubscriptionLambdaRole.Arn
      Runtime: python3.7
      Environment:
        Variables:
          QueueArn:  !GetAtt S3NotificationQueue.Arn
          BucketName: !Ref FileUploadsBucket
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import boto3
          import os
          import cfnresponse
          def lambda_handler(event, context):
            print(f"Event: {event}")
            try:
              if event['RequestType'] == 'Create':
                s3 = boto3.client('s3')
                s3.put_bucket_notification_configuration(
                  Bucket=os.environ['BucketName'],
                  NotificationConfiguration={
                    'QueueConfigurations': [
                      {
                        'QueueArn': os.environ['QueueArn'],
                        'Events': [ 's3:ObjectCreated:*' ]
                      }
                    ]
                  }
                )
              cfnresponse.send(event, context, cfnresponse.SUCCESS,
                { "QueueArn": os.environ['QueueArn'], "BucketName": os.environ['BucketName'] })
            except Exception as err:
              print(f"Exception: {repr(err)}")
              cfnresponse.send(event, context, cfnresponse.FAILED, { })


  S3EventSubscriptionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      #
      # Here is a BAD thing to do:  DO NOT do this in practice
      #
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/job-function/SystemAdministrator

  InvokeS3EventSubscriptionLambda:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt S3EventSubscriptionLambda.Arn
